@page
@using Bogus
@using Web.Helpers
@model Web.Pages.Data.SearchApiReloadClickInsidePageModel

@{
    ViewData["Title"] = "Search Api Reload";
}

<div id="app">
    <div class="form-floating mb-3">
        <input type="search" class="form-control" id="tbQuery"
               tabindex="0"
               autofocus v-on:keyup.enter="callSearchAPI" v-model="query" placeholder="I want to search with this terms">
        <label for="tbQuery">Enter search term search the data from code behind</label>
    </div>
    <div class="row row-cols-1 row-cols-md-2 g-4" v-if="searchResults.length">
        <div class="col" v-for="currentSearchTerm in searchResults" :key="currentSearchTerm.id">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">{{ currentSearchTerm.title }}</h5>
                    <p class="card-text">{{ currentSearchTerm.description }}</p>
                    <p class="card-text">
                        <small class="text-body-secondary">
                            Generated at: {{ currentSearchTerm.generatedAt }}
                        </small>
                    </p>
                </div>
                <div class="card-footer text-body-secondary">
                    <v-btn v-on:click="changeMe(currentSearchTerm.id)">Change me with {{ randomValue }}</v-btn>
                </div>
            </div>
        </div>
    </div>
    <div class="text-info" v-else>
        <div v-if="isLoading">
            Loading data from the server...
        </div>
        <div v-else>
            No data has been retrieved.
        </div>
    </div>
</div>

@section Scripts
{
    @await Html.PartialAsync("_VueJs")
    @await Html.PartialAsync("_Vuetify")
    <script>
        const { createApp, ref } = Vue
        const { createVuetify } = Vuetify
        const vuetify = createVuetify();
        const query = ref('');
        const randomValue = ref('');
        let isLoading = ref(false);
        let searchResults = ref([]);
        const app = createApp({
            setup() {
                return {
                    query,                    
                    searchResults,
                    isLoading,
                    randomValue,
                    changeMe,
                    callSearchAPI,
                }
            },
            mounted() {
                console.log('mounted and loading default search data...');
                const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                let text = "";
                for( let i=0; i < 5; i++ )
                    text += possible.charAt(Math.floor(Math.random() * possible.length));
                randomValue.value = text;
                console.log('random value is ' + randomValue.value);
                callSearchAPI();
            }
        });
        app.use(vuetify).mount('#app');

        function changeMe(id){
            let newTitle = randomValue.value;
            console.log('change me clicked with id: ' + id + ' and value: ' + newTitle);
            isLoading.value = true;
            let postModel = {
                Id: id,
                Title: newTitle
            };
            console.log(postModel);
            let subscribeUrl = '/@RouteHelper.MemoryApiRoute' + '/@RouteHelper.AddApiRoute';
            console.log('subscribe url is ' + subscribeUrl);
            fetch(subscribeUrl, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(postModel)
            }).then(response => {
                if (!response.ok) {
                    console.log("There has been an error while fetching data from the server.");
                    return Promise.reject(response);
                }
                callSearchAPI();
            });
            
            isLoading.value = false;
        }
        function callSearchAPI() {
             console.log('searching with ' + query);   
             let value = query.value;    
             isLoading.value = true;
             let searchUrl = '@Url.Page("SearchApiReloadClickInside", "Search")' + "&query=" + value;
             console.log("Search url is " + searchUrl);
             fetch(searchUrl)
                 .then(response => {
                     if (!response.ok) {
                        searchResults.value = [];
                        return Promise.reject(response);
                     }
                     return response.json();
                 }).then(data => {
                     console.log(data);
                     searchResults.value = data;
                 });
             isLoading.value = false;
        }
    </script>
}

@section Header
{
    @await Html.PartialAsync("_VuetifyStyles")
}